import copy

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from config import bot, ID
from calendar_async import simple_cal_callback, SimpleCalendar
from database import application
from inline import time_ikb
from keyboard import keyboard_menu


class FSMClient(StatesGroup):
    """
    –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    """

    state_process = State()
    state_date = State()
    state_time = State()
    state_phone = State()


# @dp.callback_query_handler(state=FSMClient.state_process)
async def set_service(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∑–∞–Ω–æ—Å–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥—É –≤ –ø–∞–º—è—Ç—å –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è,
    –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã
    :param callback_query: types.CallbackQuery
    :param state: FSMContext
    :return: callback_query.message.answer
    """
    await callback_query.message.delete_reply_markup()
    await callback_query.message.delete()

    # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ "state".
    async with state.proxy() as data:
        data["state_process"] = callback_query.data

    # –ó–¥–µ—Å—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–±—Ä–æ—Å "state". –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.
    await state.reset_state(with_data=False)

    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=await SimpleCalendar().start_calendar()
    )


# @dp.callback_query_handler(simple_cal_callback.filter())
async def process_dialog_calendar(
    callback_query: types.CallbackQuery, callback_data: dict, state: FSMContext
):
    """
    –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞—Ç—É –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è,
    —Å—Ç–∞—Ä—Ç—É–µ—Ç –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö,
    –∑–∞–Ω–æ—Å–∏—Ç –¥–∞—Ç—É –≤ –ø–∞–º—è—Ç—å –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è—ã
    :param callback_data: Dictionary
    :param callback_query: types.CallbackQuery
    :param state: FSMContext
    :return: callback_query.message.answer
    """
    selected, date = await SimpleCalendar().process_selection(
        callback_query, callback_data
    )
    if selected:
        # –°–Ω–æ–≤–∞ –∑–∞–ø—É—Å–∫–∞—é "state"
        await FSMClient.state_date.set()

        # –ó–∞–ø–∏—Å—å –¥–∞—Ç—ã –≤ "state"
        async with state.proxy() as data:
            data["state_date"] = date.strftime("%d.%m.%Y")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø–∏—Å—è—Ö –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É
        time_applications = await application.select_date_application(
            date.strftime("%d.%m.%Y")
        )
        only_time: list = [x.time for x in time_applications.scalars()]

        # –ì–ª—É–±–æ–∫–∞—è –∫–æ–ø–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π Dictionary —Å –ø–∞–º—è—Ç—å—é
        time_check_btn: dict = copy.deepcopy(time_ikb.buttons_time_check)
        time_btn: types.InlineKeyboardMarkup = copy.deepcopy(time_ikb.buttons_time)

        if len(only_time) >= 4:
            await callback_query.message.answer(
                text=f'–°–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ {date.strftime("%d.%m.%Y")} –Ω–µ—Ç \n'
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å.",
                reply_markup=keyboard_menu.main_menu_user,
            )
            await state.finish()

        else:
            for x in only_time:
                del time_check_btn[x]

            await callback_query.message.answer(
                text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è:",
                reply_markup=time_btn.add(
                    *[btn for key, btn in time_check_btn.items()]
                ),
            )

            await callback_query.message.delete()
            await FSMClient.next()


# @dp.callback_query_handler(state=FSMClient.state_time)
async def set_time(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∑–∞–Ω–æ—Å–∏—Ç –≤—Ä–µ–º—è –≤ –ø–∞–º—è—Ç—å –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
    :param callback_query: types.CallbackQuery
    :param state: FSMContext
    :return: callback_query.message.answer
    """
    # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ "state".
    async with state.proxy() as data:
        data["state_time"] = callback_query.data

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±", request_contact=True)
    )

    await callback_query.message.answer(
        text="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=keyboard
    )

    await FSMClient.next()


# @dp.message_handler(content_types=types.ContentType.CONTACT, state=FSMClient.state_phone)
async def contacts(message: types.Message, state: FSMContext):
    """
    –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–∏ –∑–∞–ø–∏—Å–∏, –∑–∞–Ω–æ—Å–∏—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ø–∞–º—è—Ç—å –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è,
    –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ—è—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–∫–∞–∑–∞
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∞–¥–º–∏–Ω—É
    :param message: types.Message
    :param state: FSMContext
    :return: bot.send_message
    """
    await message.delete()
    # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ "state".
    async with state.proxy() as data:
        if message.text:
            data["state_phone"] = message.text
        else:
            data["state_phone"] = message.contact.phone_number
    await state.finish()

    # date : tuple(full_name: str, service: str, date: str, time: str, state_phone: str, id_user: str)
    await application.sql_add_application(
        date=application.Applications(
            full_name=message.chat.full_name,
            service=data["state_process"],
            date=data["state_date"],
            time=data["state_time"],
            number=data["state_phone"],
            id_user=message.chat.id,
        ),
    )

    await bot.send_message(
        message.chat.id,
        text=f"–ó–∞–ø–∏—Å—å –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∞!\n "
        f"–ò–º—è: {message.chat.full_name}\n"
        f'–£—Å–ª—É–≥–∞: {data["state_process"]}\n'
        f'–î–∞—Ç–∞: {data["state_date"]}\n'
        f'–í—Ä–µ–º—è: {data["state_time"]}\n'
        f'–¢–µ–ª–µ—Ñ–æ–Ω: {data["state_phone"]}\n',
        reply_markup=keyboard_menu.main_menu_admin,
    )

    await bot.send_message(
        chat_id=ID[0],
        text=f"–ö–ª–∏–µ–Ω—Ç:\n "
        f"id: {message.chat.id}\n "
        f"–ò–º—è: {message.chat.full_name}\n"
        f'–£—Å–ª—É–≥–∞: {data["state_process"]}\n'
        f'–î–∞—Ç–∞: {data["state_date"]}\n'
        f'–í—Ä–µ–º—è: {data["state_time"]}\n'
        f'–¢–µ–ª–µ—Ñ–æ–Ω: {data["state_phone"]}\n'
        f"User_name: @{message.chat.username}",
    )


def register_handlers_client_service(dp: Dispatcher):
    dp.register_callback_query_handler(set_service, state=FSMClient.state_process)
    dp.register_callback_query_handler(
        process_dialog_calendar, simple_cal_callback.filter()
    )
    dp.register_callback_query_handler(set_time, state=FSMClient.state_time)
    dp.register_message_handler(
        contacts,
        content_types=[types.ContentType.CONTACT, types.ContentType.TEXT],
        state=FSMClient.state_phone,
    )
